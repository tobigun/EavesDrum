name: Build firmware

on:
  push:
    branches: [ "*" ]
    tags: [ "v*.*.*" ]

env:
  PICO1_ARTIFACT: pico-build
  PICO2_ARTIFACT: pico2-build
  FS_ARTIFACT: webui-build
  ERLANG_VERSION: 27

jobs:
  build-firmware:
    name: Build firmware (only executable)
    strategy:
      fail-fast: false
      matrix:
        environment: ["pico", "pico2", "esp32"]
    runs-on: ubuntu-24.04     
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build ${{ matrix.environment }} firmware
        uses: ./.github/actions/platformio-build
        with:
          command: run
          environment: ${{ matrix.environment }}
          save-cache: ${{ matrix.environment != 'esp32' }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        if: matrix.environment != 'esp32'
        with:
          name: ${{ matrix.environment }}-build
          path: |
            .pio/build/${{ matrix.environment }}/firmware.uf2
            .pio/build/${{ matrix.environment }}/memmap_default.ld
          if-no-files-found: error

  build-filesystem:
    name: Build filesystem (containing config and WebUI)
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: webui/package-lock.json

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: webui/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('webui/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node_modules-

      - name: Build WebUI
        run: |
          npm --prefix webui install
          
      - name: Build littleFS filesystem with config and UI
        uses: ./.github/actions/platformio-build
        with:
          command: run
          target: buildfs
          environment: pico
          save-cache: false

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FS_ARTIFACT }}
          path: .pio/build/pico/littlefs.bin
          if-no-files-found: error

  test:
    name: Run tests
    runs-on: ubuntu-24.04     
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run tests
        uses: ./.github/actions/platformio-build
        with:
          command: test
          environment: native-linux
          save-cache: false

  combine-images:
    name: Combine firmware images with filesystem and upload final UF2s
    runs-on: ubuntu-24.04
    needs:
      - build-firmware
      - build-filesystem
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Retrieve all build Artifacts
        uses: actions/download-artifact@v4

      - name: Retrieve Picotool
        uses: robinraju/release-downloader@v1
        with:
          repository: earlephilhower/pico-quick-toolchain
          tag: 4.1.0
          fileName: x86_64-linux-gnu.picotool-c56c005.250530.tar.gz
          extract: true

      - name: Combine executable UF2s and filesystem (config + UI) UF2
        run: |
          PICO1_BUILD_DIR=${{ env.PICO1_ARTIFACT }} \
          PICO2_BUILD_DIR=${{ env.PICO2_ARTIFACT }} \
          FS_IMAGE_DIR=${{ env.FS_ARTIFACT }} \
          PICOTOOL_DIR=picotool \
          OUTPUT_DIR=output \
          ./combine-uf2.sh

      - name: Upload UF2 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: eavesdrum-firmware
          path: output/*.uf2

      - name: Upload Release UF2s
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        with:
          # non-standard repository write access required for creating/updating releases
          token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          files: |
            output/*.uf2
            LICENSE.txt
